<?php

namespace Proxies\__CG__\CoreShop\Component\Core\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Currency extends \CoreShop\Component\Core\Model\Currency implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'countries', 'id', 'name', 'isoCode', 'numericIsoCode', 'symbol', 'creationDate', 'modificationDate'];
        }

        return ['__isInitialized__', 'countries', 'id', 'name', 'isoCode', 'numericIsoCode', 'symbol', 'creationDate', 'modificationDate'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Currency $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getCountries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountries', []);

        return parent::getCountries();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCountries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCountries', []);

        return parent::hasCountries();
    }

    /**
     * {@inheritDoc}
     */
    public function addCountry(\CoreShop\Component\Core\Model\CountryInterface $country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCountry', [$country]);

        return parent::addCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCountry(\CoreShop\Component\Core\Model\CountryInterface $country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCountry', [$country]);

        return parent::removeCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCountry(\CoreShop\Component\Core\Model\CountryInterface $country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCountry', [$country]);

        return parent::hasCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsoCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsoCode', []);

        return parent::getIsoCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsoCode($isoCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsoCode', [$isoCode]);

        return parent::setIsoCode($isoCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumericIsoCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumericIsoCode', []);

        return parent::getNumericIsoCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumericIsoCode($numericIsoCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumericIsoCode', [$numericIsoCode]);

        return parent::setNumericIsoCode($numericIsoCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getSymbol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSymbol', []);

        return parent::getSymbol();
    }

    /**
     * {@inheritDoc}
     */
    public function setSymbol($symbol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSymbol', [$symbol]);

        return parent::setSymbol($symbol);
    }

    /**
     * {@inheritDoc}
     */
    public function setValues($data = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValues', [$data]);

        return parent::setValues($data);
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($key, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$key, $value]);

        return parent::setValue($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate(\DateTime $creationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$creationDate]);

        return parent::setCreationDate($creationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModificationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModificationDate', []);

        return parent::getModificationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModificationDate(\DateTime $modificationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModificationDate', [$modificationDate]);

        return parent::setModificationDate($modificationDate);
    }

}
